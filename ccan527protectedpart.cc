//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "ccan527protectedpart.h"
#include <string.h>

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//конструктор и деструктор класса
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CCAN527ProtectedPart::CCAN527ProtectedPart(uint32_t receiver_buffer_size,uint32_t transmitter_buffer_size)
{ 
 cRingBuffer_Receiver_Ptr.Set(new CRingBuffer<CCAN527CANPackage>(receiver_buffer_size));
 for(uint32_t n=0;n<CAN_CHANNEL_AMOUNT;n++)
 {
  cCAN527Channel_Ptr[n].Set(new CCAN527Channel(cRingBuffer_Receiver_Ptr,transmitter_buffer_size));
 }
 Enabled=false;
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CCAN527ProtectedPart::~CCAN527ProtectedPart()
{
 Release();	
 cRingBuffer_Receiver_Ptr.Release();
 for(uint32_t n=0;n<CAN_CHANNEL_AMOUNT;n++)
 {
  cCAN527Channel_Ptr[n].Release();
 }
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//закрытые функции класса
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//открытые функции класса
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//----------------------------------------------------------------------------------------------------
//инициализировать плату
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::Init(uintptr_t base_addr_ch1,uintptr_t base_addr_ch2,uint32_t irq_ch1,uint32_t irq_ch2)
{
 Release();	
 for(uint32_t n=0;n<CAN_CHANNEL_AMOUNT;n++)
 {
  uint32_t addr=0;
  uint32_t irq=0;
  if (n==0)
  {
   addr=base_addr_ch1;	
   irq=irq_ch1;
  }
  if (n==1)
  {
   addr=base_addr_ch2;
   irq=irq_ch2;
  }  	
  if (cCAN527Channel_Ptr[n].Get()->Init(addr,irq,n)==false)
  {
   Release();
   return(false);  	
  }
 }
 Enabled=true;
 return(true); 
}
//----------------------------------------------------------------------------------------------------
//освободить ресурсы
//----------------------------------------------------------------------------------------------------
void CCAN527ProtectedPart::Release(void)
{
 if (IsEnabled()==true)
 {
  for(uint32_t n=0;n<CAN_CHANNEL_AMOUNT;n++) cCAN527Channel_Ptr[n].Get()->Release();
 }
 Enabled=false; 
}
//----------------------------------------------------------------------------------------------------
//получить, подключена ли плата
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::IsEnabled(void)
{
 return(Enabled);
}
//----------------------------------------------------------------------------------------------------
//получить номер прерывания
//----------------------------------------------------------------------------------------------------
uint8_t CCAN527ProtectedPart::GetIRQ(uint32_t channel)
{
 return(cCAN527Channel_Ptr[channel].Get()->GetIRQ());
}
//----------------------------------------------------------------------------------------------------
//сбросить флаг прерывания
//----------------------------------------------------------------------------------------------------
void CCAN527ProtectedPart::ClearIRQ(uint32_t channel)
{
 cCAN527Channel_Ptr[channel].Get()->ClearIRQ();
}
//----------------------------------------------------------------------------------------------------
//подключить прерывание
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::CANInterruptAttach(sigevent *CANInterruptEvent,uint32_t channel)
{
 return(cCAN527Channel_Ptr[channel].Get()->CANInterruptAttach(CANInterruptEvent));
}
//----------------------------------------------------------------------------------------------------
//отключить прерывание
//----------------------------------------------------------------------------------------------------
void CCAN527ProtectedPart::CANInterruptDetach(uint32_t channel)
{
 cCAN527Channel_Ptr[channel].Get()->CANInterruptDetach();	
}
//----------------------------------------------------------------------------------------------------
//получить, нужно ли выходить из потока
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::IsExitThread(void)
{
 return(ExitThread);
}
//----------------------------------------------------------------------------------------------------
//задать, нужно ли выходить из потока
//----------------------------------------------------------------------------------------------------
void CCAN527ProtectedPart::SetExitThread(bool state)
{
 ExitThread=state;
}
//----------------------------------------------------------------------------------------------------
//задать настройки сообщения
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::SetChannelMessage(uint32_t channel,uint32_t message_index,const CCAN527CANMessage &cCAN527CANMessage)
{
 return(cCAN527Channel_Ptr[channel].Get()->SetChannelMessage(message_index,cCAN527CANMessage));	
}
//----------------------------------------------------------------------------------------------------
//задать скорость обмена на канале
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::SetChannelSpeed(uint32_t channel,CCAN527Channel::CAN_SPEED speed)
{
 return(cCAN527Channel_Ptr[channel].Get()->SetChannelSpeed(speed));	
}
//----------------------------------------------------------------------------------------------------
//задать маски на канале
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::SetChannelMask(uint32_t channel,uint32_t global_message_mask,uint32_t global_extended_message_mask,uint32_t message_15_mask)
{
 return(cCAN527Channel_Ptr[channel].Get()->SetChannelMask(global_message_mask,global_extended_message_mask,message_15_mask));	
}
//----------------------------------------------------------------------------------------------------
//применить заданные настройки к каналу
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::ApplyChannelSettings(uint32_t channel)
{
 return(cCAN527Channel_Ptr[channel].Get()->ApplyChannelSettings());	
}
//----------------------------------------------------------------------------------------------------
//получить принятый пакет
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::GetReceivedPackage(CCAN527CANPackage &cCAN527CANPackage)
{
 return(cRingBuffer_Receiver_Ptr.Get()->Pop(cCAN527CANPackage));
}
//----------------------------------------------------------------------------------------------------
//добавить пакет для отправки
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::TransmittPackage(const CCAN527CANPackage &cCAN527CANPackage)
{	
 uint32_t channel=cCAN527CANPackage.ChannelIndex;
 return(cCAN527Channel_Ptr[channel].Get()->TransmittPackage(cCAN527CANPackage));
}
//----------------------------------------------------------------------------------------------------
//выполнить передачу данных, если это возможно
//----------------------------------------------------------------------------------------------------
void CCAN527ProtectedPart::TransmittProcessing(uint32_t channel)
{
 cCAN527Channel_Ptr[channel].Get()->TransmittProcessing();	
}
//----------------------------------------------------------------------------------------------------
//обработчик прерывания
//----------------------------------------------------------------------------------------------------
void CCAN527ProtectedPart::OnInterrupt(uint32_t channel)
{
 cCAN527Channel_Ptr[channel].Get()->OnInterrupt();
}
//----------------------------------------------------------------------------------------------------
//очистить буфер приёма
//----------------------------------------------------------------------------------------------------
void CCAN527ProtectedPart::ClearReceiverBuffer(uint32_t channel)
{
 cRingBuffer_Receiver_Ptr.Get()->Reset();
}
//----------------------------------------------------------------------------------------------------
//очистить буфер передачи
//----------------------------------------------------------------------------------------------------
void CCAN527ProtectedPart::ClearTransmitterBuffer(uint32_t channel)
{
 cCAN527Channel_Ptr[channel].Get()->ClearTransmitterBuffer();
}
//----------------------------------------------------------------------------------------------------
//проверить работоспособность контроллера канала и сбросить канал при необходимости
//----------------------------------------------------------------------------------------------------
bool CCAN527ProtectedPart::BussOffControl(uint32_t channel)
{
 return(cCAN527Channel_Ptr[channel].Get()->BussOffControl());
}
//----------------------------------------------------------------------------------------------------
//цикл обработки
//----------------------------------------------------------------------------------------------------
void CCAN527ProtectedPart::Processing(uint32_t channel)
{
 cCAN527Channel_Ptr[channel].Get()->Processing();
}