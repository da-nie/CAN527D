#ifndef C_MEMORY_CONTROL_H
#define C_MEMORY_CONTROL_H

//****************************************************************************************************
//Класс управления операциями с памятью
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <stdint.h>


//****************************************************************************************************
//Класс управления операциями с памятью
//****************************************************************************************************

 class CMemoryControl
 {
  //-переменные-----------------------------------------------------------------------------------------
  private: 	
   uint64_t PhisicalAddr;//физический адрес
   volatile void* VirtualAddr;//виртуальный адрес
   uint64_t Size;//диапазон памяти
  //-конструктор----------------------------------------------------------------------------------------
  public:
   CMemoryControl(void);
   CMemoryControl(uint64_t phisical_addr,uint64_t size);
   CMemoryControl(const CMemoryControl &cMemoryControl);
  //-деструктор-----------------------------------------------------------------------------------------
   ~CMemoryControl(void);
  //-открытые функции-----------------------------------------------------------------------------------
  public:     
   CMemoryControl& operator=(const CMemoryControl &cMemoryControl);//оператор =
   void Release(void);//освободить ресурсы
   bool SetAddr(uint64_t phisical_addr,uint64_t size);//задать адрес
   bool IsAddr(uint64_t offset);//получить, есть ли данный адрес
   volatile void* GetAddr(void);//получить адрес
   uint64_t GetSize(void);//получить размер области памяти
   bool Write(uint64_t offset,uint64_t size,volatile uint8_t *data);//записать в память
   bool Read(uint64_t offset,uint64_t size,volatile uint8_t *data);//считать из памяти
  //-закрытые функции-----------------------------------------------------------------------------------
 };

#endif
